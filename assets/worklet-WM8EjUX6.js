var b=Object.defineProperty;var v=(e,t,s)=>t in e?b(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var o=(e,t,s)=>v(e,typeof t!="symbol"?t+"":t,s);(function(){"use strict";class e{constructor(n){o(this,"bit");o(this,"register",1);switch(n){case"Long":this.bit=1;break;case"Short":this.bit=6;break}}next(){const n=this.register&1^this.register>>this.bit&1;return this.register=this.register>>1,this.register=this.register&16383|n<<14,(this.register&1)===0}}class t extends AudioWorkletProcessor{constructor(){super();o(this,"phase",0);o(this,"value",!1);o(this,"generator",new e("Long"))}static get parameterDescriptors(){return[{name:"volume",defaultValue:1},{name:"mode",defaultValue:1},{name:"frequency",defaultValue:440}]}process(P,g,i){const l=g[0],c=i.volume,f=i.mode,a=i.frequency;f[0]===1?this.generator=new e("Long"):this.generator=new e("Short");for(let h=0;h<l.length;h++){const u=l[h];for(let r=0;r<u.length;r++){const d=a.length>1?a[r]:a[0],m=c.length>1?c[r]:c[0];this.value?u[r]=m:u[r]=0;const p=this.phase;this.phase=(this.phase+d/globalThis.sampleRate)%1,p>this.phase&&(this.value=this.generator.next())}}return!0}}registerProcessor("noiseProcessor",t)})();
